import display.DispatchMovie2;/*******************************************************************\*																	**  This class adds ability to broadcast rollover events  			**  All events are sent with an event type for disection in listener	**																	*\*******************************************************************/class display.DispatchMovie3 extends DispatchMovie2{		// Constants to link to sprite:		public static var CLASS_REF = DispatchMovie3;	public static var LINKAGE_ID:String = "DispatchMovie3";		public static var ROLL_OVER_EVENT:String = "RollOver";	public static var ROLL_OUT_EVENT:String = "RollOut";	public static var CLICK_EVENT:String = "Click";		private var DEFAULT_EVENT:String = CLICK_EVENT;		/***************************\	* Constructor				*	\***************************/	public function DispatchMovie3(){		super(); // Instantiates listeners array and sets onRelease event		trace('DispatchMovie3: Constructor: '+this._name+' created');				// Add rollover ability		this.onRollOver = rollOverEvent; 		this.onRollOut = rollOutEvent;	}			private function rollOverEvent():Void{		trace('DispatchMovie3: rollOverEvent()');		sendEvent(ROLL_OVER_EVENT);	}		private function rollOutEvent():Void{		trace('DispatchMovie3: rollOutEvent()');		sendEvent(ROLL_OUT_EVENT);	}		// Override the sendEvent so that we can say what type of event it is	private function sendEvent(e:String):Void{		trace('DispatchMovie3: sendEvent(): '+this._name+' sending event to all listeners');		//Build the event to send		var event:Object=new Object({target:this});		if (e){			event.type = e;		} else {			event.type = DEFAULT_EVENT;		}		// send it to all listeners		for (var i:Number=0; i<listeners.length; i++){			for (var prop in listeners[i]){				trace(' > '+prop+': '+listeners[i][prop]);			}			// Run the specified function in the specified listener			listeners[i].listenerRef[listeners[i].functionRef](event);		}	}	}