import util.Observer;import util.Observable;import util.SimpleAbstractObservable;/*******************************************************************\*																	**  This class extends movieclip to allow broadcasting click events  **																	*\*******************************************************************/class display.DispatchMovie extends MovieClip implements Observable{		// Constants to link to sprite:		public static var CLASS_REF = DispatchMovie;	public static var LINKAGE_ID:String = "DispatchMovie";		/***********************************\	*									*	* Don't need, in observable			*	*	//Store the list of observers	*	*	private var observers:Array;	*	*									*	\***********************************/		//Store an instance of AbstractObservable to implement Observable methods	private var observable:Observable;					/***************************\	* Constructor				*	\***************************/	public function DispatchMovie(){		// Constructor shouldn't do anything for MovieClip extensions.		// Use onLoad instead				// That said, we get into problems with the asynchronous events running		trace('DispatchMovie: Constructor');		observable = new SimpleAbstractObservable();		// Handle click on self to call dispatch		this.onRelease = sendEvent;	}		public function onLoad(){		trace('DispatchMovie: onLoad(): I must have loaded');		// Initialising code goes here		//observable = new SimpleAbstractObservable();		// Handle click on self to call dispatch		//this.onRelease = sendEvent;	}		/***************************************\	* Implement the Observable interface	*	\***************************************/	//We'll want it to be able to take subscriptions	public function addSubscriber(o:Observer):Void{		trace('Dispatch Movie: addSubscriber(): adding '+o);		for (var prop in o){			trace(' > '+prop+': '+o[prop]);		}		//Hand it off to the abstract		observable.addSubscriber(o);		trace('DispatchMovie: addSubscriber(): exiting');	}	//And remove them when done	public function removeSubscriber(o:Observer):Void{		//Hand it off to the abstract		observable.removeSubscriber(o)	}	//And tell the subscribers about events	public function notifyObservers(infoObj:Object):Void{		trace('DispatchMovie: notifyObservers: Handing notification request to AbstractObserver: '+infoObj.sender+', '+infoObj.event); 		//Hand it off to the abstract		observable.notifyObservers(infoObj);	}				/***************************************\	* Allow to send click events			*	\***************************************/	private function sendEvent():Void{		trace('DispatchMovie: sendEvent(): sending event');		//build the infoObj		var info:Object = {sender:this._name, event:"Click"};		//notifyObservers		notifyObservers(info);	}}				