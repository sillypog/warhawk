/*******************************************************************\*																	**  This class extends movieclip to allow broadcasting click events  **																	*\*******************************************************************/class display.DispatchMovie2 extends MovieClip{		// Constants to link to sprite:		public static var CLASS_REF = DispatchMovie2;	public static var LINKAGE_ID:String = "DispatchMovie2";		private var listeners:Array;		/***************************\	* Constructor				*	\***************************/	public function DispatchMovie2(){		trace('DispatchMovie2: Constructor: '+this._name+' created');		listeners = new Array();		// Handle click on self to call dispatch to listeners		this.onRelease = sendEvent;		//this.addListener = addListener; // I added this here because in the MVC model it didn't see this otherwise	}		/***************************\	* Listener methods			*	\***************************/	public function addListener(functionName:String,listener:Object):Void{		trace('DispatchMovie2: addListener(): '+this._name+' added '+listener.name);		//Don't add duplicates		for (var i:Number=0; i<listeners.length; i++){			if (listeners[i].listenerRef==listener){				return;			}		}		listeners.push({listenerRef:listener,functionRef:functionName});		/*		trace('DispatchMovie2: addListener(): '+this.name_+' listeners array length ='+listeners.length);		trace('DispatchMovie2: addListener(): listeners array...');		for (var i:Number=0; i<listeners.length; i++){			for (var prop in listeners[i]){				trace(' > '+prop+': '+listeners[i][prop]);			}		}		*/	}		public function removeListener(listener:Object):Void{		trace('DispatchMovie2: removeListener(): '+this._name+' removed '+listener.name);		for (var i:Number =0; i<listeners.length; i++){			if (listeners[i].listenerRef==listener){				//remove this one				listeners.splice(i,1);				break;			}		}	}		private function sendEvent():Void{		trace('DispatchMovie2: sendEvent(): '+this._name+' sending event to all listeners');		//Build the event to send		var event:Object=new Object({target:this});		// send it to all listeners		for (var i:Number=0; i<listeners.length; i++){			for (var prop in listeners[i]){				trace(' > '+prop+': '+listeners[i][prop]);			}			// Run the specified function in the specified listener			listeners[i].listenerRef[listeners[i].functionRef](event);		}	}}	