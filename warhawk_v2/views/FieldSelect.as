import util.Observable;import mvc.Controller;import warhawk_v2.LeaderboardModel;import mx.utils.Delegate;import warhawk_v2.controllers.FieldSelectController;import display.DispatchMovie2;import display.DispatchButton;import warhawk_v2.MessageBundle;import warhawk_v2.MessageCodes;import warhawk_v2.AnimationCentre;import warhawk_v2.PlayerData;import warhawk_v2.views.AbstractWarhawkView;/***************************************************************************\*																			**  The Field Select view for Warhawk Widget Version 2						**																			**  Peter Hastie - 23rd February 2009										**																			**  AS2.0																	**																			** In multi state:															**  - Shows the current field with values shown as text						**  - Allows cycling between fields in text display							**  - Opens drop down menu to select specific field							**																			** In single state:															**  - Shows player name and rank												**  - Click to go back to multi state										**																			*\***************************************************************************/class warhawk_v2.views.FieldSelect extends AbstractWarhawkView{		private var containerClip:MovieClip;						// What these assets are drawn inside	private var containerDepth:Number;							// The current depth of the container on the stage		private var barClip:MovieClip;								// The clip containing the controls	private var internalDepth:Number;							// Depth within the bar	private var fieldButton:DispatchMovie2;						// The button that shows the current field and opens the drop down menu	private var leftButton:DispatchButton;						// Cycles left through fields	private var rightButton:DispatchButton;						// Cycles right through fields				/***************\	* Constructor	*	\***************/	public function FieldSelect(m:Observable, c:Controller, target:MovieClip, depth:Number, ac:AnimationCentre){				// Set up model and abstract using inherited methods		super(m,c,ac);		trace('FieldSelect: Constructor');				// Name this view		viewName = 'FieldSelect View';				drawAssets(target,depth);	}			/*******************\	* Public functions	*	\*******************/	public function update(o:Observable, infoObj:Object):Void{		trace('FieldSelect: update()');		// This is where we decide whether or not this message is for us		var bundle:MessageBundle = MessageBundle(infoObj);		if (bundle.messageType == MessageCodes.TEXT_FIELD_CHANGE){			// Update the field heading			MovieClip(fieldButton).field_txt.text = bundle.messageInfo;		} else if (bundle.messageType == MessageCodes.STATE_CHANGE){			var newState = bundle.messageInfo;			trace('FieldSelect: update(): got a STATE_CHANGE event and state is ' + newState);			if (newState == 'multi'){				// Fade everything in and make it selectable				/*				animationCentre.addSubscriber(barClip,"_alpha",100);				animationCentre.addSubscriber(fieldButton,"_alpha",100);				animationCentre.addSubscriber(leftButton,"_alpha",100);				animationCentre.addSubscriber(rightButton,"_alpha",100);				*/				showAssets();			} else if (newState == 'single'){				// Fade everything out and make it nonselectable				/*				animationCentre.addSubscriber(barClip,"_alpha",0);				animationCentre.addSubscriber(fieldButton,"_alpha",0);				animationCentre.addSubscriber(leftButton,"_alpha",0);				animationCentre.addSubscriber(rightButton,"_alpha",0);				*/				/*				barClip._alpha=0;				fieldButton._alpha=0;				*/				hideAssets();			}		} else if ((bundle.messageType == MessageCodes.PLAYER_CHANGE) || (bundle.messageType == MessageCodes.NEW_PLAYERS)){			if (LeaderboardModel(getModel()).getState() == 'single'){				//updateSingleInfo(Number(bundle.messageInfo));				updateSingleInfo();			}		}	}			// Define our own default controller for this, don't want null	public function defaultController (model:Observable):Controller{		trace('FieldSelect: defaultController(): returning a FieldSelectController');		return new FieldSelectController(model);	}			/*******************\	* Private functions	*	\*******************/	private function drawAssets(target:MovieClip, depth:Number):Void{		trace('FieldSelect: drawAssets()');		containerClip = target;		containerDepth = depth;				// Add the sprite to the stage		barClip = containerClip.attachMovie("UpperControlBar","upper_bar_mc",containerDepth);		barClip._y = 76.4;		barClip._x = 10;		internalDepth = 1;				// Add buttons to the bar		fieldButton = DispatchMovie2(barClip.attachMovie("TextDisplaySelector","field_btn",internalDepth++));		leftButton = DispatchButton(barClip.attachMovie("LeftCycleButton","left_btn",internalDepth++));		rightButton = DispatchButton(barClip.attachMovie("RightCycleButton","right_btn",internalDepth++));				leftButton._x = 80.1;		fieldButton._x = 90.3;		rightButton._x = 173.3;				// Get the text correct		MovieClip(fieldButton).field_txt.text = LeaderboardModel(getModel()).getSortField();				// Allow highlighting in the field button - this will require some Delegate-ing		fieldButton.onRollOver = Delegate.create(this, textToYellow);		fieldButton.onRollOut = Delegate.create(this, textToGrey);				// Link buttons with controller		leftButton.addListener("click", getController());		rightButton.addListener("click", getController());		fieldButton.addListener("click", getController());	}				private function textToYellow():Void{		trace('FieldSelect: textToYellow');		barClip.field_btn.field_txt.textColor = 0xffff00;	}		private function textToGrey():Void{		trace('FieldSelect: textToGrey');		barClip.field_btn.field_txt.textColor = 0x767b7f;	}		private function showAssets():Void{		trace('FieldSelect: showAssets');		barClip._visible = true;		MovieClip(fieldButton).field_txt.text = 'DISPLAY FIELD:';	}		private function hideAssets():Void{		trace('FieldSelect: hideAssets');		leftButton._visible = false;		rightButton._visible = false;	}		//private function updateSingleInfo(currentPlayer:Number):Void{	private function updateSingleInfo():Void{		var currentPlayer:Number = LeaderboardModel(getModel()).getCurrentSinglePlayer();		var currentPlayerData:PlayerData = PlayerData(LeaderboardModel(getModel()).getPlayerData(currentPlayer));		barClip.label_txt.text = currentPlayerData.playerName;		MovieClip(fieldButton).field_txt.text = currentPlayerData.rank;	}}