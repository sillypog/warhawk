import util.Observable;import mvc.Controller;import display.DispatchMovie2;import warhawk_v2.controllers.LogoController;import warhawk_v2.views.AbstractWarhawkView;/***************************************************************************\*																			**  The Logo cycler view for Warhawk Widget Version 2						**																			**  Peter Hastie - 18th February 2009										**																			**  AS2.0																	**																			**  - Attaches the LogoCycler to the stage									**  - Sends click events to controller										**																			*\***************************************************************************/class warhawk_v2.views.Logo extends AbstractWarhawkView{		private var logoClip:MovieClip;				// Reference to the drawn clip		/***************\	* Constructor	*	\***************/	public function Logo(m:Observable, c:Controller, target:MovieClip, depth:Number){		// Set up model and abstract using inherited methods		super(m,c);		trace('Logo: Constructor');				// Name this view		viewName = 'Logo View';				// Draw the logos on the stage		drawView(target, depth);	}				/*******************\	* Public functions	*	\*******************/	// Define our own default controller for this, don't want null	public function defaultController (model:Observable):Controller{		trace('Logo: defaultController(): returning a LogoController');		return new LogoController(model);	}			/*******************\	* Private functions	*	\*******************/	private function drawView(container:MovieClip, depth:Number){		trace('Logo: drawView()');		//LogoCycler is attached as a DispatchMovie2 instance so it can register click listeners		var logoClip:DispatchMovie2 = DispatchMovie2(container.attachMovie("LogoCyclerMovie","logos_mc",depth));		logoClip._x = 20;		logoClip._y = 40.8;		logoClip.addListener("click",getController());	}}				